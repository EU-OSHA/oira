<?php
/**
 * @file
 * Code for the osha_wiki feature.
 */

include_once 'osha_wiki.features.inc';
include_once 'osha_wiki.migrate.inc';

define('OSHA_WIKI_CONTENT_TYPE', 'wiki_page');

/**
 * Define custom view mode for entities - wiki
 */
function osha_wiki_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['osha_wiki'] = array(
    'label' => t('OSH Wiki'),
    'custom settings' => TRUE,
  );
}

/* *
 * Implements hook_block_list_alter() to hide the related wiki under publication
 * when manual wiki articles have been linked to the current publication
 */

function osha_wiki_block_list_alter(&$blocks) {
    $node = menu_get_object();
    if ($node && !empty($node->field_related_oshwiki_articles[LANGUAGE_NONE][0])) {
        foreach ($blocks as $block_id => $block) {
            if ($block->delta == 'related_content-block_5') {
                unset ($blocks[$block_id]);
                break;
            }
        }
    }
}

/**
 * Implements hook_block_info().
 */
function osha_wiki_block_info() {
  $blocks = array();
  $blocks['osha_wiki_related_content'] = array(
    'info' => t('OSHwiki articles (with theme)'),
    'status' => 1,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'weight' => -3,
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  // Test URL: /node/875
  $blocks['osha_wiki_notopic'] = array(
    'info' => t('OSHwiki articles (no theme)'),
    'status' => 1,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'weight' => -3,
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * {@inheritdoc}
 */
function osha_wiki_block_view($delta) {
  $block = array();
  switch ($delta) {
    case 'osha_wiki_related_content':
      $block['subject'] = '';
      $block['content'] = osha_wiki_block_content();
      break;
    case 'osha_wiki_notopic':
      $block['subject'] = '';
      $block['content'] = osha_wiki_notopic_content();
      break;
  }
  return $block;
}

/**
 * Generates content for the related wiki articles block.
 *
 * @return string
 *   Block content
 */
function osha_wiki_block_content() {
  $node = menu_get_object();
  if (empty($node->field_wiki_categories[LANGUAGE_NONE][0]['tid'])) {
    // if wiki_category is not set, hide this block
    return NULL;
  }
  $category_id = $node->field_wiki_categories[LANGUAGE_NONE][0]['tid'];
  $category = taxonomy_term_load($category_id);
  $category_en_name = $category->name_original;
  $wiki_page_url = 'http://oshwiki.eu/wiki/Category:' . str_replace(' ', '_', $category_en_name);
  $find_more = t('Find OSHwiki articles on this theme');
  return osha_wiki_block_content_template($wiki_page_url, $find_more);
}

/**
 * Use of osha_title_formatter_' . $entity->type . '_view.
 */
function osha_title_formatter_wiki_page_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $output = isset($items[0]) ? $items[0]['safe_value'] : '';

  $entity_wrapper = entity_metadata_wrapper('node', $entity);
  if (!empty($output) && $settings['title_link'] == 'content'
    && !empty($entity->field_wiki_page_url)) {
    $uri = $entity_wrapper->field_wiki_page_url->value();
    $output = l($output, $uri['url'], array('html' => TRUE, 'attributes' => array('target' => '_blank')));
  }

  $wrap_tag = empty($settings['title_style']) ? '_none' : $settings['title_style'];

  if ($wrap_tag != '_none') {
    $element = array(
      'element' => array(
        '#tag' => $wrap_tag,
        '#value' => $output,
      ),
    );

    if (!empty($settings['title_class'])) {
      $element['#attributes'] = array('class' => $settings['title_class']);
    }

    $output = theme('html_tag', $element);
  }

  $element = array(
    array(
      '#markup' => $output,
    ),
  );

  return $element;
}

/**
 * Implements hook_node_view().
 */
function osha_wiki_node_view($node, $view_mode, $langcode) {
  // Redirect all wiki pages to thei full page on wiki site.
  if ($node->type == 'wiki_page'
    && $view_mode == 'full'
    && !empty($node->field_wiki_page_url)) {
    $entity_wrapper = entity_metadata_wrapper('node', $node);
    drupal_goto($entity_wrapper->field_wiki_page_url->value()['url'], array(), 301);
  }
}

/**
 * Use of osha_smart_trim_formatter_' . $entity->type . '_view
 */
function osha_smart_trim_formatter_wiki_page_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  $settings = $display['settings'];
  switch ($display['type']) {
    case 'smart_trim_format':
      $entity_wrapper = entity_metadata_wrapper('node', $entity);
      if (!empty($entity->field_wiki_page_url)) {
        $uri = $entity_wrapper->field_wiki_page_url->value();
        $uri['path'] = $uri['url'];
      }
      else {
        $uri = entity_uri($entity_type, $entity);
      }
      foreach ($items as $delta => $item) {
        // Check if the formatter involves a link.
        // The default behaviour is to use the main body field, but the summary
        // option allows users to use the summary field IFF it is not empty.
        $output = '';

        // Replace item with field_summary.
        if (!empty($entity->field_summary)) {
          $item = $entity_wrapper->field_summary->value();
        }

        if (!empty($settings['summary_handler']) && $settings['summary_handler'] != 'ignore' && !empty($item['summary'])) {
          $output = _text_sanitize($instance, $langcode, $item, 'summary');
        }
        else {
          $output = _text_sanitize($instance, $langcode, $item, 'value');
        }

        // Process additional options (currently only HTML on/off)
        if (!empty($settings['trim_options'])) {
          if (!empty($settings['trim_options']['text'])) {
            // Strip tags
            $preserve_tags = !empty($settings['trim_preserve_tags']) ? $settings['trim_preserve_tags'] : '';
            $output = strip_tags(str_replace('<', ' <', $output), $preserve_tags);

            // Strip out line breaks
            $output = preg_replace('/\n|\r|\t/m', ' ', $output);

            // Strip out non-breaking spaces
            $output = str_replace('&nbsp;', ' ', $output);
            $output = str_replace("\xc2\xa0", ' ', $output);

            // Strip out extra spaces
            $output = trim(preg_replace('/\s\s+/', ' ', $output));
          }
        }

        // Make the trim, provided we're not showing a full summary
        $shortened = FALSE;
        if ($settings['summary_handler'] != 'full' || empty($item['summary'])) {
          if ($settings['trim_type'] == 'words') {
            //only bother with this is we have to
            if ($settings['trim_length'] < str_word_count($output)) {
              //use \s or use PREG_CLASS_UNICODE_WORD_BOUNDARY?
              $words = preg_split('/\s/', $output, NULL, PREG_SPLIT_NO_EMPTY);
              $output2 = implode(" ", array_slice($words, 0,  $settings['trim_length']));
              $output2 = _filter_htmlcorrector($output2);
            }
            //field contained fewer words than we're trimming at, so do nothing
            else {
              $output2 = $output;
            }
          }
          else {
            // Use views_trim_text() if available.
            if (module_exists('views')) {
              $output2 = views_trim_text(array(
                'max_length' => $settings['trim_length'],
                'word_boundary' => TRUE,
                'ellipsis' => FALSE,
                'html' => TRUE,
              ), $output);
            }
            else {
              //See http://api.drupal.org/api/drupal/modules%21field%21modules%21text%21text.module/function/text_summary/7
              //text_summary is smart about looking for paragraphs, sentences,
              //etc, not strictly just length. Uses truncate_utf8 as well
              $output2 = text_summary($output, $instance['settings']['text_processing'] ? $item['format'] : NULL, $settings['trim_length']);
            }
          }

          //verify if we actually performed any shortening
          if (drupal_strlen($output) != drupal_strlen($output2)) {
            $shortened = TRUE;
          }
          $output = $output2;
        }

        // Only include the extension if the text was truncated
        $extension = '';
        if ($shortened) {
          $extension = filter_xss($settings['trim_suffix']);
        }
        // Don't duplicate period at end of text and beginning of extension
        if (substr($output, -1, 1) == '.' && substr($extension, 0, 1) == '.') {
          $extension = substr($extension, 1);
        }

        // Add the link, if there is one!
        // But wait! Don't add a more link if the field ends in <!--break-->
        if ($settings['more_link'] && strpos(strrev($output), strrev('<!--break-->')) !== 0) {
          $extension .= l(t($settings['more_text']), $uri['path'], array('html' => TRUE, 'attributes' => array('class' => array('more-link'), 'target' => '_blank')));
        }

        $output_appended = preg_replace('#^(.*)(\s?)(</[^>]+>)$#Us', '$1' . $extension . '$3', $output);

        //check if the regex did anything. if not, append manually
        if ($output_appended == $output) $output_appended = $output . $extension;

        // If linking to content is selected the trimmed text will have tags
        // removed from the trimmed text. Need to find a more elegant way of
        // doing this without conflicting the other settings.
        if ($settings['trim_link'] != 0 && !empty($uri['path'])) {
          $output_appended = strip_tags($output_appended);
          $output = l($output_appended, $uri['path'], array('attributes' => array('target' => '_blank')));
          $element[$delta] = array(
            '#markup' => $output,
          );
          return $element;
        }
        $element[$delta] = array(
          '#markup' => $output_appended,
        );
      }
      break;
  }
  return $element;
}


/**
 * Generates content for the related wiki articles block without a specific wiki category.
 *
 * @return string
 *   Block content
 */
function osha_wiki_notopic_content() {
  $wiki_page_url = 'http://oshwiki.eu/wiki/Main_Page';
  $find_more = t('Find OSHwiki articles');
  return osha_wiki_block_content_template($wiki_page_url, $find_more);
}

function osha_wiki_block_content_template($wiki_page_url, $find_more) {
  $wiki_name = t('OSHwiki');
  $goto_wiki = t('Go to OSHwiki');
  $content = '<div class="OSHWiki"><div class="separatorOsHWiki">&nbsp;</div><div id="OSHWikiDivTit"><div class="imgOSHWiki"><img src="/sites/all/themes/osha_frontend/images/OSHwiki.png" alt="OSHwiki" width="26" height="26" /></div><div class="OSHWikiTitle">'
    .$wiki_name
    .'</div></div><div class="p2">'
    .$find_more
    .'<span><br /></span></div><div class="p3"><a href="'
    .$wiki_page_url
    .'" target="_blank">'
    .$goto_wiki
    .' <img src="/sites/all/themes/osha_frontend/images/flecha.png" alt="'
    .$goto_wiki
    .'" width="19" height="11" /></a></div></div>';
  return $content;
}

/**
 * Implements hook_post_features_enable_feature().
 *
 * {@inheritdoc}
 */
function osha_wiki_post_features_enable_feature($component) {
  // After the field_instance ...
  if ($component == 'variable') {
    menu_rebuild();
    drupal_static_reset();
    if ($role = user_role_load_by_name('administrator')) {
      $permissions = array(
        'create wiki_page content',
        'edit own wiki_page content',
        'edit any wiki_page content',
        'delete own wiki_page content',
        'delete any wiki_page content',
      );
      user_role_grant_permissions($role->rid, $permissions);
    }
  }
}

/**
 * Validate that wiki_category is set when manual articles are added
 * see CW-534
 */
function osha_wiki_node_validate($node, $form, &$form_state) {
  if ($node->type == OSHA_ARTICLE_CONTENT_TYPE_ARTICLE && isset($node->field_related_oshwiki_articles)) {
    if (empty($node->field_wiki_categories[LANGUAGE_NONE][0]['tid']) && (
         !empty($node->field_related_oshwiki_articles[LANGUAGE_NONE][0]['target_id']) ||
         !empty($node->field_related_oshwiki_articles[LANGUAGE_NONE][1]['target_id']) 
        )) {
        form_set_error('field_wiki_categories', t('OSHwiki category is mandatory'));
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function osha_wiki_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['field_wiki_categories'])) {
    $form['field_wiki_categories']['#after_build'][] = 'osha_wiki_alter_term_option_list';
  }
}

function osha_wiki_alter_term_option_list($form_element, &$form_state) {
  if (isset($form_element[LANGUAGE_NONE]['#options'])) {
    $form_element[LANGUAGE_NONE]['#options'] = osha_wiki_exclude_categories_options($form_element[LANGUAGE_NONE]['#options']);
  }
  else {
    foreach (element_children($form_element[LANGUAGE_NONE]) as $idx) {
      if (!empty($form_element[LANGUAGE_NONE][$idx]['tid']['#options'])) {
        $form_element[LANGUAGE_NONE][$idx]['tid']['#options'] = osha_wiki_exclude_categories_options($form_element[LANGUAGE_NONE][$idx]['tid']['#options']);
      }
    }
  }
  return $form_element;
}

function osha_wiki_exclude_categories_options($options) {
  $allowed = variable_get('osha_wiki_allowed_values', array());
  $allowed[] = '_none';
  return array_intersect_key($options, array_flip($allowed));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function osha_wiki_form_oira_configuration_form_alter(&$form, &$form_state, $form_id) {
  $options = array();
  if ($vocabulary = taxonomy_vocabulary_machine_name_load('wiki_categories')) {
    if ($terms = taxonomy_get_tree($vocabulary->vid)) {
      foreach ($terms as $term) {
        $options[$term->tid] = str_repeat('-', $term->depth) . i18n_taxonomy_term_name($term);
      }
    }
  }
  $form['osha_wiki_allowed_values'] = array(
    '#type' => 'select',
    '#title' => 'Allowed wiki categories',
    '#multiple' => TRUE,
    '#options' => $options,
    '#default_value' => variable_get('osha_wiki_allowed_values', array()),
  );
}


/**
 * Implements hook_osha_tmgmt_i18n_string_list().
 */
function osha_wiki_osha_tmgmt_i18n_string_list() {
  module_load_include('inc', 'osha_wiki', 'osha_wiki.translations');
  return osha_wiki_get_translatable_strings();
}

/**
 * Implements Elysia hook_cronapi().
 */
function osha_wiki_cron_cronapi() {
  return array('osha_wiki_cron' => array(
    'description' => 'Check OSHWiki for new pages and import them in Drupal',
    'rule' => '0 0 * * *', // Synchronize daily
  ));
}

/**
 * Implements hook_cron().
 */
function osha_wiki_cron() {
  watchdog('osha_wiki', "Running Wiki synchronisation cron job", array(), WATCHDOG_INFO);
  $migration = new OshaMigrateWiki(array());
  $migration->processImport();

  module_load_include('inc', 'osha_wiki', 'osha_wiki.drush');
  drush_osha_wiki_categories_sync();
}

/**
 * Migrate pages from oshwiki by page title.
 *
 * @param $wikipages
 */
function osha_wiki_migrate_wikipages_by_title($wikipages) {
  if (empty($wikipages)) {
    return;
  }
  $migration = new OshaMigrateWikiByTitles(array('wikipages' => $wikipages));
  $migration->processImport();
}

