<?php
/**
 * @file
 * Code for the OSHA Events feature.
 */

include_once 'osha_events.features.inc';

/**
 * Implements hook_form_alter().
 */
function osha_events_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'events_node_form') {

    $form['#validate'][] = 'osha_events_form_validate';

    // Activity field changes
    if (isset($form['field_activity'][LANGUAGE_NONE][0])) {
      unset($form['field_activity'][LANGUAGE_NONE]['add_more']);
      // Extract the field field tree to change cardinality
      $field = $form['field_activity'][LANGUAGE_NONE][0]['tid'];

      // Show the label as usual
      unset($field['#title_display']);

      // Field is not required, so add also an empty option.
      $field['#required'] = FALSE;
      $field['#options'] = array('' => t('- None -')) + $field['#options'];
      // Switch validator
      $field['#element_validate'] = array('options_field_widget_validate');

      $form['field_activity'][LANGUAGE_NONE] = $field;
    }

    // Create new event form
    if(!isset($form['#node']->nid)){
      drupal_add_js(drupal_get_path('module', 'osha_events') . '/js/new_event_form.js');
    }

    // MC-84 Disable country and city from the form when selected type is Webminar.
    // Necessary to add the js in an after build callback because we need it
    // after form_set_error occurs.
    $form['#after_build'][] = 'osha_events_node_form_after_build';
  }
}

/**
 * After build callback for events_node_form
 */
function osha_events_node_form_after_build($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'osha_events') . '/js/event_form.js');
  return $form;
}

/**
 * Validation callback.
 */
function osha_events_form_validate($form, &$form_state) {
  // When publishing an event, some fields are required.
  $values = $form_state['values'];
  $node = $form_state['node'];
  if ($values['status'] == 1) {
    $type = $values['field_event_type'][LANGUAGE_NONE][0]['value'];
    if (empty($type) || $type == 'Visit') {
      form_set_error('field_event_type', 'Events of type <b>Visit</b> can not be published');
    }
    // if (empty($values['body'][$node->language][0]['value'])) {
    //   form_set_error('body', 'You have to add a Description.');
    // }
    if (empty($values['field_start_date'][LANGUAGE_NONE][0]['value'])) {
      form_set_error('field_start_date', 'You have to add a Start Date.');
    }
    if (empty($values['field_start_date'][LANGUAGE_NONE][0]['value2'])) {
      form_set_error('field_start_date', 'You have to add an End Date .');
    }
    /* Disabled since MC-9
    if (empty($values['field_website_of_event'][LANGUAGE_NONE][0]['title'])) {
      form_set_error('field_website_of_event', 'You have to add a Web site name.');
    }
    if (empty($values['field_website_of_event'][LANGUAGE_NONE][0]['url'])) {
      form_set_error('field_website_of_event', 'You have to add a Web site url.');
    }
    */
    if (empty($values['field_organization'][LANGUAGE_NONE][0]['value'])) {
      form_set_error('field_organization', 'You have to add an Organization.');
    }

    // Country and city are not required for webminar events.
    if ($type != 'Webminar') {
      if (empty($values['field_country_code'][LANGUAGE_NONE][0]['value'])) {
        form_set_error('field_country_code', 'You have to add a Country Code.');
      }
      if (empty($values['field_city'][LANGUAGE_NONE][0]['value'])) {
        form_set_error('field_city', 'You have to add a City.');
      }
    }
    else {
      // Country and city fields need to be NULL for webminar events so that
      // they will not show in frontend.
      $form_state['values']['field_country_code'][LANGUAGE_NONE][0]['value'] = $form_state['values']['field_city'][LANGUAGE_NONE][0]['value'] = NULL;
    }

    if (empty($values['field_tags'][LANGUAGE_NONE][0]['tid'])) {
      form_set_error('field_tags', 'You have to add a Category.');
    }
    if ($values['field_for_the_web'][LANGUAGE_NONE][0]['value'] != 'Yes') {
      form_set_error('field_for_the_web', 'Event is not for web publishing. To override, set field "For the web" to "Yes".');
    }
  }

  // Check if the event is unique by Start and End Date field
  $start_date = $form_state['values']['field_start_date']['und'][0]['value'];
  $end_date = $form_state['values']['field_start_date']['und'][0]['value2'];

  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'events')
      ->fieldCondition('field_start_date', 'value', $start_date, '=')
      ->fieldCondition('field_start_date', 'value2', $end_date, '=')
      ->entityOrderBy('entity_id', 'DESC');
  if ( isset($node->nid) ) {
      $query->entityCondition('entity_id', $node->nid, '!=');
  }
  $results = $query->execute();

  if (isset($results['node']) && count($results['node']) >= 1) {
    drupal_set_message(t('One or more events have the same Start and End date.'), 'warning');
    $events = '';
    foreach($results['node'] as $nid => $node_obj){
      $node = node_load($nid);
      $events .= l($node->title, 'node/'.$nid);
      $events .= '<br />';
    }
    drupal_set_message($events, 'warning');
  }
}

function osha_events_query_alter($query) {
  if ($query->hasTag('debug')) {
    $sql = (string)$query;
    $connection = Database::getConnection();
    foreach ((array) $query->arguments() as $key => $val) {
      $quoted[$key] = $connection->quote($val);
    }
    $sql = strtr($sql, $quoted);
    dpm($sql);
  }
}


/**
 * Altering Date Popup to remove labels and description for specific field
 */
function osha_events_date_popup_process_alter(&$element, &$form_state, $context) {
  if ($element['#name'] == 'field_start_date_value' || $element['#name'] == 'field_start_date_value2') {
    //unset($element['date']['#description']);
    unset($element['date']['#title']);
  }
}

/**
 * Implements hook_osha_tmgmt_i18n_string_list().
 */
function osha_events_osha_tmgmt_i18n_string_list() {
  module_load_include('inc', 'osha_events', 'osha_events.translations');
  return osha_events_get_translatable_strings();
}


/**
 * Implements hook_user_role_insert().
 */
function osha_events_user_role_insert($role) {
  if ($role->name == 'Events Editor') {
    user_role_grant_permissions($role->rid, array(
      'access contextual links',
      'access dashboard',

      'create files',
      'view own private files',
      'view own files',
      'view files',

      'edit own image files',
      'edit any image files',
      'delete own image files',
      'download own image files',
      'download any image files',

      'use text format full_html',
      'use text format filtered_html',

      'access media browser',

      'edit meta tags',
      'access content',
      'view own unpublished content',
      'view revisions',

      'create events content',
      'edit own events content',
      'edit any events content',

      'create url aliases',
      'access administration pages',
      'view the administration theme',
    ));
  }
}

/**
 * Implements hook_phpexcel_export().
 */
function osha_events_phpexcel_export($op, &$data, &$phpexcel, $options, $column = NULL, $row = NULL) {
  $xls_colours = array(
    'Black' => '000000',
    'Red' => 'FF0000',
    'Grey' => '808080',
    'Yellow' => 'FFFF00',
    'Green' => '008000',
    'Blue' => '0000FF'
  );
  switch($op) {
    case 'post cell':
      if ($row == 1) {
        // first row
        $styleArray = array('font'  => array('bold' => TRUE));
        $phpexcel->getStyleByColumnAndRow($column,$row)->applyFromArray($styleArray);
      } else {
        // use the color named in the first cell of the current row
        $first_cell = $phpexcel->getCellByColumnAndRow(0, $row)->getValue();
        if (!empty($xls_colours[$first_cell])) {
          $styleArray = array(
            'font'  => array(
              'color' => array('rgb' => $xls_colours[$first_cell])
            )
          );
          $phpexcel->getStyleByColumnAndRow($column,$row)->applyFromArray($styleArray);
        }
      }
      break;
  }
}

/**
 * Implements hook_element_info_alter()
 */
function osha_events_element_info_alter(&$type) {
  if (isset($type['link_field'])) {
    $type['link_field']['#process'][] = 'osha_events_link_field_process';
  }
}

/**
 * Change field label
 */
function osha_events_link_field_process($element, $form_state, $complete_form) {
  switch ($element['#field_name']) {
    case 'field_website_of_event':
      $element['title']['#title'] = t('Website name');
      $element['url']['#title'] = t('Website url');
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function osha_events_field_formatter_info() {
  $info = array(
    'translated_title_as_link' => array(
      'label' => 'Translated title, as link',
      'field types' => array('link_field'),
      'description' => 't(title) as link.',
    )
  );
  return $info;
}

/**
 * Implements hook_field_formatter_view().
 */
function osha_events_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'translated_title_as_link':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'osha_events_translated_title_as_link_format',
          '#entity' => $entity,
          '#item' => $item,
          '#delta' => $delta,
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function osha_events_theme() {
  return array(
    'osha_events_translated_title_as_link_format' => array(
      'variables' => array('entity' => NULL, 'item' => NULL, 'delta' => NULL),
    )
  );
}

/*
* Formats link as translated title
*/
function theme_osha_events_translated_title_as_link_format($element) {
  $item = $element['item'];
  if (empty($item['title'])) {
    $title = $item['display_url'];
  } else {
    $title = t($item['title']);
  }
  return l($title, $item['url'], array(
    'attributes' => $item['attributes'],
    'query' => $item['query'],
    'fragment' => $item['fragment'],
    'absolute' => $item['absolute'],
    'html' => $item['html']
  ));
}
