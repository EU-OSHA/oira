<?php

define('RELATED_OSHWIKI_BLOCK_LIMIT', 3);

/**
 * Implements hook_block_info().
 */
function oira_blocks_block_info() {
  return array(
    'oshwiki_featured_articles' => array(
      'info' => t('OSHwiki featured articles custom block'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'related_ncw_publications' => array(
      'info' => t('Related publications from Corporate website'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function oira_blocks_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'oshwiki_featured_articles':
      $block['subject'] = t('OSHwiki featured articles');
      $block['content'] = oshwiki_featured_articles_block_view();
      break;
    case 'related_ncw_publications':
      $block['subject'] = t('Related publications');
      $block['content'] = related_ncw_publications_block_view();
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 */
function oira_blocks_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'oira_blocks');

  return array(
    'oshwiki_featured_articles' => array(
      'template' => 'oshwiki_featured_articles',
      'variables' => array(
        'tagged_wikis' => NULL
      ),
      'path' => $path . '/templates'
    ),
    'related_ncw_publications' => array(
      'template' => 'related_ncw_publications',
      'variables' => array(
        'publications' => NULL
      ),
      'path' => $path . '/templates'
    ),
  );
}

function oshwiki_featured_articles_block_view() {
  $tagged_wikis = array();
  if ($node = menu_get_object()) {
    if ($node->type == 'article') {
      $tagged_wikis = osha_blocks_get_related_wiki($node);
    }
  }
  return theme('oshwiki_featured_articles', array('tagged_wikis' => $tagged_wikis));
}

/**
 * Called from hook_block_view
 */
function osha_blocks_get_related_wiki($node) {
  $wiki_articles_no = 0;
  $tagged_wikis = array();
  if (!empty($node->field_related_oshwiki_articles)) {
    $manual_wiki_articles = $node->field_related_oshwiki_articles[LANGUAGE_NONE];
    $wiki_articles_no = sizeof($manual_wiki_articles);
    // add manually tagged wiki articles (hidden in display mode)
    foreach ($manual_wiki_articles as $related_wiki) {
      $tmp_node = node_load($related_wiki['target_id']);
      $tagged_wikis[$tmp_node->nid] = node_view($tmp_node,'osha_wiki');
    }
  }

  if ($wiki_articles_no < RELATED_OSHWIKI_BLOCK_LIMIT) {
    $limit = RELATED_OSHWIKI_BLOCK_LIMIT - $wiki_articles_no;
    // get RELATED_OSHWIKI_BLOCK_LIMIT-$wiki_articles_no tagged wiki
    $wiki_categories_tids = array();
    if (!empty($node->field_wiki_categories)) {
      $wiki_categories_tids = $node->field_wiki_categories[LANGUAGE_NONE];
    }

    if (!empty($wiki_categories_tids)) {
      // query all wiki articles in the same category or its children
      $tids = array();
      $voc = taxonomy_vocabulary_machine_name_load('wiki_categories');
      foreach ($wiki_categories_tids as $tid) {
        // normally only one $tid, but just in case
        array_push($tids, $tid['tid']);
        // load and push also children
        $terms = taxonomy_get_tree($voc->vid, $tid['tid']);
        foreach ($terms as $term) {
          array_push($tids, $term->tid);
        }
      }

      // exclude manually related
      $excluded_nids = array();
      array_push($excluded_nids, 0); // avoid empty NOT IN clause
      if (!empty($node->field_related_oshwiki_articles)) {
        foreach ($node->field_related_oshwiki_articles as $related_wiki) {
          array_push($excluded_nids, $related_wiki[0]['target_id']);
        }
      }
      $query = new EntityFieldQuery();
      $result = $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'wiki_page')
        ->entityCondition('entity_id', $excluded_nids, 'NOT IN')
        ->fieldCondition('field_wiki_categories', 'tid', $tids, 'IN')
        ->fieldOrderBy('field_updated', 'value', 'DESC')
        ->pager($limit)
        ->execute();
      if (!empty($result)) {
        foreach ($result['node'] as $n) {
          $tmp_node = node_load($n->nid);
          $tagged_wikis[$tmp_node->nid] = node_view($tmp_node, 'osha_wiki');
        }
      }
    }
  }
  return $tagged_wikis;
}

function related_ncw_publications_block_view() {
  global $language;
  $related_publications = array();
  if ($node = menu_get_object()) {
    if ($node->type == 'article') {
      $tags = array();
      if (!empty($node->field_tags)) {
        foreach ($node->field_tags[LANGUAGE_NONE] as $tag) {
          $term = taxonomy_term_load($tag['tid']);
          if (!empty($term->field_tags_code)) {
            $tags[$tag['tid']] = $term->field_tags_code[LANGUAGE_NONE][0]['value'];
          }
        }
      }
      $ncw_url = variable_get('ncw_migration_root_url', 'https://osha.europa.eu/');

      $export_url = 'export/tools-and-publications/publications/';
      if (!empty($tags)) {
        $export_url .= 'tags-' . implode('-', $tags);
      }
      $export_url = url($export_url, [
        'base_url' => $ncw_url,
        'absolute' => TRUE,
        'query' => [
          'limit' => 3,
        ],
      ]);
      $json = file_get_contents($export_url);
      $publications = json_decode($json, TRUE);
      foreach ($publications as $key => $publication) {
        if (empty($title = $publication['title'][$language->language])) {
          if (empty($title = $publication['title']['en'])) {
            if (empty($title = $publication['title'][LANGUAGE_NONE])) {
              $title = reset($publication['title']);
            }
          }
        }
        $related_publications[] = [
          'title' => $title,
          'url' => url($publication['path_alias'], [
            'base_url' => $ncw_url,
            'prefix' => $language->language,
            'absolute' => TRUE,
          ]),
        ];
      }
    }
  }
  return theme('related_ncw_publications', array('publications' => $related_publications));
}
