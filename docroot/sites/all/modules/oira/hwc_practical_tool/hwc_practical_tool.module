<?php
/**
 * @file
 * Code for the HWC Practical tool feature.
 */

include_once 'hwc_practical_tool.features.inc';

/**
 * Implements hook_block_info().
 */
function hwc_practical_tool_block_info() {
  $blocks = array();
  $blocks['hwc_practical_tool_listing'] = array(
    'info' => t('Practical tools listing'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['hwc_practical_tool_language_list'] = array(
    'info' => t('Practical tool language list'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function hwc_practical_tool_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  // Add lang options to language field filter on admin page.
  if ($form['#id'] == 'views-exposed-form-administrate-oira-tools-page') {
    if (!empty($form['field_language_value'])) {
      $form['field_language_value']['#type'] = 'select';
      $form['field_language_value']['#options'] = array('' => 'Any') + osha_language_list_options();
      $form['field_language_value']['#chosen'] = TRUE;
    }
    if (!empty($form['access_id'])) {
      $form['access_id']['#chosen'] = TRUE;
    }
  }
}

/**
 * Implements hook_block_view().
 */
function hwc_practical_tool_block_view($delta = '') {
  $block = array();
  if ($delta == 'hwc_practical_tool_language_list') {
    if ($node = menu_get_object()) {
      $q = db_select('languages', 'l');
      $q->fields('l', array('language', 'name', 'native'));
      $q->innerJoin('entity_translation', 'a', 'l.language = a.language');
      $q->condition('a.entity_id', $node->nid);
      $q->condition('a.entity_type', 'node');
      $languages = $q->execute()->fetchAll();

      $block['content'] = theme('hwc_practical_tool_language_list', array(
          'languages' => $languages,
        )
      );
    }
  }
  if ($delta == 'hwc_practical_tool_listing') {
    module_load_include('inc', 'hwc_practical_tool', 'hwc_practical_tool.pages');
    $block['content'] = drupal_get_form('hwc_practical_tool_menu_tools_form');
  }
  return $block;
}

/**
 * Use of osha_title_formatter_' . $entity->type . '_view'.
 *
 * Show the title alt when it's the case.
 */
function osha_title_formatter_practical_tool_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $language;
  if (($field['field_name'] == 'title' || $field['field_name'] == 'title_field')
    &&!empty($entity->field_language[LANGUAGE_NONE][0]['value'])
    && $entity->field_language[LANGUAGE_NONE][0]['value'] == $language->language
    && !empty($entity->field_alternative_title[LANGUAGE_NONE][0]['value'])) {
    $items[0]['value'] = $entity->field_alternative_title[LANGUAGE_NONE][0]['value'];
    $items[0]['safe_value'] = $entity->field_alternative_title[LANGUAGE_NONE][0]['safe_value'];
  }
  return title_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
}

/**
 * Use of osha_smart_trim_formatter_' . $entity->type . '_view'.
 *
 * Show the body alt when it's the case.
 */
function osha_smart_trim_formatter_practical_tool_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $language;
  if ($field['field_name'] == 'body'
    &&!empty($entity->field_language[LANGUAGE_NONE][0]['value'])
    && $entity->field_language[LANGUAGE_NONE][0]['value'] == $language->language
    && !empty($entity->field_alternative_body[LANGUAGE_NONE][0]['value'])) {
    $items[0]['value'] = $entity->field_alternative_body[LANGUAGE_NONE][0]['value'];
    $items[0]['safe_value'] = $entity->field_alternative_body[LANGUAGE_NONE][0]['safe_value'];
  }
  return smart_trim_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
}

/**
 * Use of osha_smart_trim_formatter_' . $entity->type . '_view'.
 *
 * Show the body alt when it's the case.
 */
function osha_text_formatter_practical_tool_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $language;
  if ($field['field_name'] == 'body'
    &&!empty($entity->field_language[LANGUAGE_NONE][0]['value'])
    && $entity->field_language[LANGUAGE_NONE][0]['value'] == $language->language
    && !empty($entity->field_alternative_body[LANGUAGE_NONE][0]['value'])) {
    $items[0]['value'] = $entity->field_alternative_body[LANGUAGE_NONE][0]['value'];
    $items[0]['safe_value'] = $entity->field_alternative_body[LANGUAGE_NONE][0]['safe_value'];
  }
  return text_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
}

/**
 * Implements hook_views_pre_render().
 */
function hwc_practical_tool_views_pre_render(&$view) {
  if ($view->name == 'tools' && $view->current_display == 'block_1') {
    $view->display_handler->set_option('use_more', TRUE);
    $view->display_handler->set_option('use_more_text', t('Discover more OiRA tools'));
    $view->display_handler->set_option('link_display', 'custom_url');
    $view->display_handler->set_option('use_more_always', TRUE);
    $view->display_handler->set_option('link_url', 'oira-tools');
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function hwc_practical_tool_field_formatter_info() {
  $info = array(
    'access_tool_link_and_language' => array(
      'label' => t('Access tool link and language'),
      'field types' => array('field_collection'),
      'settings' => array(
        'label' => t('Visit tool in:'),
      ),
    ),
    'access_tool_link_details' => array(
      'label' => t('Access tool link for practical tool details'),
      'field types' => array('field_collection'),
      'settings' => array(
        'label_1' => t('Access tool:'),
        'label_2' => t('Available in:'),
      ),
    ),
    'external_tool_link' => array(
      'label' => t('Link with icon'),
      'field types' => array('link_field'),
    ),
  );
  return $info;
}

/**
 * Implements hook_date_combo_process_alter().
 */
function hwc_practical_tool_date_combo_process_alter(&$element, $form_state, $context) {
  // Revised date max date now.
  if ($element['#field_name'] == 'field_revised_date') {
    $element['value']['#datepicker_options']['maxDate'] = date($element['value']['#date_format']);
  }
}

/**
 * Implements hook_theme().
 */
function hwc_practical_tool_theme() {
  $theme = array();
  $path = drupal_get_path('module', 'hwc_practical_tool');
  $theme['hwc_practical_tool_language_list'] = array(
    'template' => 'hwc_practical_tool_language_list',
    'variables' => array(
      'languages' => NULL,
    ),
    'path' => $path . '/templates',
  );
  $theme['access_tool_link_and_language'] = array(
    'template' => 'hwc_practical_tool_access_tool_link_and_language',
    'variables' => array(
      'items' => NULL,
      'label' => NULL,
    ),
    'path' => $path . '/templates',
  );
  $theme['access_tool_link_details'] = array(
    'template' => 'hwc_practical_tool_access_tool_link_details',
    'variables' => array(
      'items' => NULL,
      'label_1' => NULL,
      'label_2' => NULL,
      'node' => NULL,
    ),
    'path' => $path . '/templates',
  );
  $theme['tool_link_formatter_icon_link'] = array(
    'variables' => array('element' => NULL, 'field' => NULL),
  );
  return $theme;
}

/**
 * Implements hook_field_formatter_view().
 */
function hwc_practical_tool_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'access_tool_link_and_language':
      $settings = $display['settings'];
      $label = trim($settings['label']);
      $element = array(
        '#theme' => 'access_tool_link_and_language',
        '#items' => $items,
        '#label' => $label,
      );
      break;

    case 'access_tool_link_details':
      $settings = $display['settings'];
      $label_1 = trim($settings['label_1']);
      $label_2 = trim($settings['label_2']);
      $element = array(
        '#theme' => 'access_tool_link_details',
        '#items' => $items,
        '#label_1' => $label_1,
        '#label_2' => $label_2,
        '#node' => entity_metadata_wrapper('node', $entity),
      );
      break;

    case 'external_tool_link':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'tool_link_formatter_icon_link',
          '#element' => $item,
          '#field' => $instance,
          '#display' => $display,
        );
      }
      break;

  }
  return $element;
}

/**
 * Formats a link using "Link" as the link text.
 */
function theme_tool_link_formatter_icon_link($vars) {
  $link_options = $vars['element'];
  $link_options['external'] = TRUE;
  $link_options['attributes']['target'] = '_blank';
  $link_options['html'] = TRUE;
  unset($link_options['title']);
  unset($link_options['url']);
  return $vars['element']['url'] ? l('<span class="glyphicon glyphicon-new-window"></span>', $vars['element']['url'], $link_options) : '';
}

/**
 * Implements hook_token_info().
 */
function hwc_practical_tool_token_info() {
  // Add as token the alternative title.
  $info['tokens']['node']['title-alt'] = array(
    'name' => t('Title or title alt'),
    'description' => t("Bullshit"),
    'type' => 'node',
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function hwc_practical_tool_tokens($type, $tokens, array $data = array(), array $options = array()) {
  global $language;
  $replacements = array();
  $sanitize = !empty($options['sanitize']);
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'title-alt':
          $title = $node->title;
          $replacements[$original] = $sanitize ? filter_xss($title) : $title;
          if ($node->type == 'practical_tool'
            && !empty($node->field_language[LANGUAGE_NONE][0]['value'])
            && $node->field_language[LANGUAGE_NONE][0]['value'] == $language->language
            && !empty($node->field_alternative_title[LANGUAGE_NONE][0]['value'])) {
            $replacements[$original] = $node->field_alternative_title[LANGUAGE_NONE][0]['safe_value'];
          }
          break;
      }
    }
  }
  return $replacements;
}
