<?php
/**
 * @file
 * Code for the HWC Practical tool feature.
 */

include_once 'hwc_practical_tool.features.inc';

/**
 * Implements hook_block_info().
 */
function hwc_practical_tool_block_info() {
  $blocks = array();
  $blocks['hwc_practical_tool_listing'] = array(
    'info' => t('Practical tools listing'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['hwc_practical_tool_language_list'] = array(
    'info' => t('Practical tool language list'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_field_extra_fields().
 */
function hwc_practical_tool_field_extra_fields() {
  $extra = array(
    'display' => array(
      'related_partners' => array(
        'label' => t('Related partners'),
        'description' => t('Related partners'),
        'extra field type' => 'related_partners',
        'weight' => 0,
        'callback' => 'hwc_practical_tool_related_partners_callback',
      ),
      'tools_see_more' => array(
        'label' => t('See more link'),
        'description' => t('See more link'),
        'extra field type' => 'tools_see_more',
        'weight' => 0,
        'callback' => 'hwc_practical_tool_see_more_callback',
      ),
    ),
  );
  $extra['node']['practical_tool'] = $extra;

  return $extra;
}


/**
 * Implements hook_node_view().
 */
function hwc_practical_tool_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'practical_tool') {
    $extra_fields = field_info_extra_fields('node', $node->type, 'display');
    $extra_field_pc = $extra_fields['related_partners'];
    if (!empty($extra_field_pc['display'][$view_mode]['visible'])) {
      $display = $extra_fields['related_partners']['display'];
      $node->content['related_partners'] = [
        '#theme' => 'field',
        '#label_display' => $display[$view_mode]['label'],
        '#title' => $extra_field_pc['label'],
        '#items' => _hwc_practical_tool_get_partners($node),
        '#field_type' => 'extra_field',
        '#field_name' => 'related_partners',
        '#entity_type' => 'node',
        '#bundle' => 'partner',
        '#view_mode' => $view_mode,
        '#weight' => (int) $display[$view_mode]['weight'],
      ];
    }
    if (!empty($extra_fields['tools_see_more'])) {
      $extra_field_see_more = $extra_fields['tools_see_more'];
      if (!empty($extra_field_see_more['display'][$view_mode]['visible'])) {
        $display = $extra_fields['tools_see_more']['display'];
        $node->content['tools_see_more'] = [
          '#theme' => 'field',
          '#label_display' => $display[$view_mode]['label'],
          '#title' => $extra_field_see_more['label'],
          '#items' => array($node->nid => 'See more'),
          '#field_type' => 'extra_field',
          '#field_name' => 'tools_see_more',
          '#entity_type' => 'node',
          '#bundle' => 'partner',
          '#view_mode' => $view_mode,
          '#weight' => (int) $display[$view_mode]['weight'],
        ];
      }
    }
  }
}

function _hwc_practical_tool_related_partners_cid($node) {
  return 'tool_related_partners:' . $node->nid;
}

function _hwc_practical_tool_get_partners($node) {
  $cache = cache_get(_hwc_practical_tool_related_partners_cid($node));
  if (!empty($cache)) {
    return $cache->data;
  }
  $partners = array();
  $section = current($node->workbench_access);
  $partner = oira_partner_by_section_id_load($section);
  if (!empty($partner)) {
    $partners[] = $partner;
  }
  if (!empty($node->field_co_author)) {
    $node_wrapper = entity_metadata_wrapper('node', $node);
    foreach ($node_wrapper->field_co_author->value() as $term) {
      $co_partner = oira_partner_by_section_id_load($term->tid);
      if (!empty($co_partner)) {
        $partners[] = $co_partner;
      }
    }
  }
  cache_set(_hwc_practical_tool_related_partners_cid($node), $partners, 'cache', variable_get('page_cache_maximum_age', strtotime('+1 day')));
  return $partners;
}


function hwc_practical_tool_field_extra_fields_formatter_info() {
  return [
    'related_partners' => [
      'label' => t('Related partners'),
      'description' => t('Format related partners.'),
      'extra field types' => ['related_partners'],
//      'settings' => ['format' => 'medium'],
    ],
    'tools_see_more' => [
      'label' => t('See more details link'),
      'description' => t('Shows more details about tool'),
      'extra field types' => ['tools_see_more'],
      'settings' => [
        'slice_point' => 250,
        'parent_selector' => '.views-row',
      ],
    ],
  ];
}

function hwc_practical_tool_field_extra_fields_formatter_settings_form($extra_field_name, $view_mode, $display, $form, &$form_state) {
  $settings = $display['settings'];
  $element = [];
  switch ($display['type']) {
    case 'related_partners':
      break;

    case 'tools_see_more':
      $element['slice_point'] = array(
        '#type' => 'textfield',
        '#title' => t('Slice point'),
        '#description' => t('Slice point to apply to body.'),
        '#default_value' => $settings['slice_point'],
      );
      $element['parent_selector'] = array(
        '#type' => 'textfield',
        '#title' => t('Parent selectors'),
        '#description' => t('Parent container selector'),
        '#default_value' => $settings['parent_selector'],
      );
      break;
  }
  return $element;
}

function hwc_practical_tool_field_extra_fields_formatter_settings_summary($extra_field_name, $view_mode, $display) {
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'related_partners':
      return t('Display partners');

    case 'tools_see_more':
      return t('See more');
  }
}

function hwc_practical_tool_field_extra_fields_formatter_view($entity_type, $entity, $extra_field_name, $langcode, $items, $display) {
  $element = [];
  if (empty($display['settings'])) {
    $settings = hwc_practical_tool_field_extra_fields_formatter_info()['tools_see_more']['settings'];
  }
  else {
    $settings = $display['settings'];
  }
  switch ($display['type']) {
    case 'related_partners':
      foreach ($items as $delta => $item) {
        $render = node_view($item, 'teaser');
        $element[$delta] = array(
          '#type' => 'markup',
          '#markup' => drupal_render($render),
        );
      }
      break;

    case 'tools_see_more':
      $path = drupal_get_path('module', 'hwc_practical_tool');
      foreach ($items as $delta => $item) {
        // TODO add js and css.
        $settings['show_more_text'] = 'See more details';
        $settings['show_less_text'] = 'See less details';
        $settings['delta'] = $entity->nid;
        $element[$delta] = array(
          '#type' => 'markup',
          '#markup' => '<span class="tools-see-more" data-nid="' . $entity->nid . '">' . t('See more details') . '</span>',
          '#attached' => array(
            'css' => array(
              $path . '/css/see_more.css',
            ),
            'js' => array(
              $path . '/js/see_more.js',
              libraries_get_path('jquery.expander') . '/jquery.expander.js' => array('type' => 'file'),
              array('data' => array('tools_expander' => array($delta => $settings)), 'type' => 'setting'),
            ),
          ),
        );
      }
      break;
  }
  return $element;
}

/**
 * Extra field callback for views.
 */
function hwc_practical_tool_related_partners_callback($node) {
  $node->related_partners = _hwc_practical_tool_get_partners($node);
  hwc_practical_tool_node_view($node, 'full', 'en');
  if (!empty($node->content['related_partners'])) {
    $content = $node->content['related_partners'];
    $display = array('type' => 'related_partners');
    $element = hwc_practical_tool_field_extra_fields_formatter_view('node', $node, 'related_partners', 'en', $content['#items'], $display);
    $element['#type'] = 'container';
    $element['#attributes'] = array('class' => array('field-name-related-partners'));
    return drupal_render($element);
  }
}

/**
 * Extra field callback for views.
 */
function hwc_practical_tool_see_more_callback($node) {
  $items = array('See more');
  $display = array('type' => 'tools_see_more');
  $element = hwc_practical_tool_field_extra_fields_formatter_view('node', $node, 'related_partners', 'en', $items, $display);
  return drupal_render($element);
}




/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function hwc_practical_tool_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  // Add lang options to language field filter on admin page.
  if ($form['#id'] == 'views-exposed-form-administrate-oira-tools-page') {
    if (!empty($form['field_language_value'])) {
      $form['field_language_value']['#type'] = 'select';
      $form['field_language_value']['#options'] = array('' => 'Any') + osha_language_list_options();
      $form['field_language_value']['#chosen'] = TRUE;
    }
    if (!empty($form['access_id'])) {
      $form['access_id']['#chosen'] = TRUE;
    }
  }
}

/**
 * Implements hook_block_view().
 */
function hwc_practical_tool_block_view($delta = '') {
  $block = array();
  if ($delta == 'hwc_practical_tool_language_list') {
    if ($node = menu_get_object()) {
      $q = db_select('languages', 'l');
      $q->fields('l', array('language', 'name', 'native'));
      $q->innerJoin('entity_translation', 'a', 'l.language = a.language');
      $q->condition('a.entity_id', $node->nid);
      $q->condition('a.entity_type', 'node');
      $languages = $q->execute()->fetchAll();

      $block['content'] = theme('hwc_practical_tool_language_list', array(
          'languages' => $languages,
        )
      );
    }
  }
  if ($delta == 'hwc_practical_tool_listing') {
    module_load_include('inc', 'hwc_practical_tool', 'hwc_practical_tool.pages');
    $block['content'] = drupal_get_form('hwc_practical_tool_menu_tools_form');
  }
  return $block;
}

/**
 * Use of osha_title_formatter_' . $entity->type . '_view'.
 *
 * Show the title alt when it's the case.
 */
function osha_title_formatter_practical_tool_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $language;
  if (($field['field_name'] == 'title' || $field['field_name'] == 'title_field')
    &&!empty($entity->field_language[LANGUAGE_NONE][0]['value'])
    && $entity->field_language[LANGUAGE_NONE][0]['value'] == $language->language
    && !empty($entity->field_alternative_title[LANGUAGE_NONE][0]['value'])) {
    $items[0]['value'] = $entity->field_alternative_title[LANGUAGE_NONE][0]['value'];
    $items[0]['safe_value'] = $entity->field_alternative_title[LANGUAGE_NONE][0]['safe_value'];
  }
  return title_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
}

/**
 * Use of osha_smart_trim_formatter_' . $entity->type . '_view'.
 *
 * Show the body alt when it's the case.
 */
function osha_smart_trim_formatter_practical_tool_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $language;
  if ($field['field_name'] == 'body'
    &&!empty($entity->field_language[LANGUAGE_NONE][0]['value'])
    && $entity->field_language[LANGUAGE_NONE][0]['value'] == $language->language
    && !empty($entity->field_alternative_body[LANGUAGE_NONE][0]['value'])) {
    $items[0]['value'] = $entity->field_alternative_body[LANGUAGE_NONE][0]['value'];
    $items[0]['safe_value'] = $entity->field_alternative_body[LANGUAGE_NONE][0]['safe_value'];
  }
  return smart_trim_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
}

/**
 * Use of osha_smart_trim_formatter_' . $entity->type . '_view'.
 *
 * Show the body alt when it's the case.
 */
function osha_text_formatter_practical_tool_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $language;
  if ($field['field_name'] == 'body'
    &&!empty($entity->field_language[LANGUAGE_NONE][0]['value'])
    && $entity->field_language[LANGUAGE_NONE][0]['value'] == $language->language
    && !empty($entity->field_alternative_body[LANGUAGE_NONE][0]['value'])) {
    $items[0]['value'] = $entity->field_alternative_body[LANGUAGE_NONE][0]['value'];
    $items[0]['safe_value'] = $entity->field_alternative_body[LANGUAGE_NONE][0]['safe_value'];
  }
  return text_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
}

/**
 * Implements hook_views_pre_render().
 */
function hwc_practical_tool_views_pre_render(&$view) {
  if ($view->name == 'tools' && $view->current_display == 'block_1') {
    $view->display_handler->set_option('use_more', TRUE);
    $view->display_handler->set_option('use_more_text', t('Discover more OiRA tools'));
    $view->display_handler->set_option('link_display', 'custom_url');
    $view->display_handler->set_option('use_more_always', TRUE);
    $view->display_handler->set_option('link_url', 'oira-tools');
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function hwc_practical_tool_field_formatter_info() {
  $info = array(
    'access_tool_link_and_language' => array(
      'label' => t('Access tool link and language'),
      'field types' => array('field_collection'),
      'settings' => array(
        'label' => t('Visit tool in:'),
      ),
    ),
    'access_tool_link_details' => array(
      'label' => t('Access tool link for practical tool details'),
      'field types' => array('field_collection'),
      'settings' => array(
        'label_1' => t('Access tool:'),
        'label_2' => t('Available in:'),
      ),
    ),
    'external_tool_link' => array(
      'label' => t('Link with icon'),
      'field types' => array('link_field'),
    ),
  );
  return $info;
}

/**
 * Implements hook_date_combo_process_alter().
 */
function hwc_practical_tool_date_combo_process_alter(&$element, $form_state, $context) {
  // Revised date max date now.
  if ($element['#field_name'] == 'field_revised_date') {
    $element['value']['#datepicker_options']['maxDate'] = date($element['value']['#date_format']);
  }
}

/**
 * Implements hook_theme().
 */
function hwc_practical_tool_theme() {
  $theme = array();
  $path = drupal_get_path('module', 'hwc_practical_tool');
  $theme['hwc_practical_tool_language_list'] = array(
    'template' => 'hwc_practical_tool_language_list',
    'variables' => array(
      'languages' => NULL,
    ),
    'path' => $path . '/templates',
  );
  $theme['access_tool_link_and_language'] = array(
    'template' => 'hwc_practical_tool_access_tool_link_and_language',
    'variables' => array(
      'items' => NULL,
      'label' => NULL,
    ),
    'path' => $path . '/templates',
  );
  $theme['access_tool_link_details'] = array(
    'template' => 'hwc_practical_tool_access_tool_link_details',
    'variables' => array(
      'items' => NULL,
      'label_1' => NULL,
      'label_2' => NULL,
      'node' => NULL,
    ),
    'path' => $path . '/templates',
  );
  $theme['tool_link_formatter_icon_link'] = array(
    'variables' => array('element' => NULL, 'field' => NULL),
  );
  return $theme;
}

/**
 * Implements hook_field_formatter_view().
 */
function hwc_practical_tool_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'access_tool_link_and_language':
      $settings = $display['settings'];
      $label = trim($settings['label']);
      $element = array(
        '#theme' => 'access_tool_link_and_language',
        '#items' => $items,
        '#label' => $label,
      );
      break;

    case 'access_tool_link_details':
      $settings = $display['settings'];
      $label_1 = trim($settings['label_1']);
      $label_2 = trim($settings['label_2']);
      $element = array(
        '#theme' => 'access_tool_link_details',
        '#items' => $items,
        '#label_1' => $label_1,
        '#label_2' => $label_2,
        '#node' => entity_metadata_wrapper('node', $entity),
      );
      break;

    case 'external_tool_link':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'tool_link_formatter_icon_link',
          '#element' => $item,
          '#field' => $instance,
          '#display' => $display,
        );
      }
      break;

  }
  return $element;
}

/**
 * Formats a link using "Link" as the link text.
 */
function theme_tool_link_formatter_icon_link($vars) {
  $link_options = $vars['element'];
  $link_options['external'] = TRUE;
  $link_options['attributes']['target'] = '_blank';
  $link_options['html'] = TRUE;
  unset($link_options['title']);
  unset($link_options['url']);
  return $vars['element']['url'] ? l('<span class="glyphicon glyphicon-new-window"></span>', $vars['element']['url'], $link_options) : '';
}

/**
 * Implements hook_token_info().
 */
function hwc_practical_tool_token_info() {
  // Add as token the alternative title.
  $info['tokens']['node']['title-alt'] = array(
    'name' => t('Title or title alt'),
    'description' => t("Bullshit"),
    'type' => 'node',
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function hwc_practical_tool_tokens($type, $tokens, array $data = array(), array $options = array()) {
  global $language;
  $replacements = array();
  $sanitize = !empty($options['sanitize']);
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'title-alt':
          $title = $node->title;
          $replacements[$original] = $sanitize ? filter_xss($title) : $title;
          if ($node->type == 'practical_tool'
            && !empty($node->field_language[LANGUAGE_NONE][0]['value'])
            && $node->field_language[LANGUAGE_NONE][0]['value'] == $language->language
            && !empty($node->field_alternative_title[LANGUAGE_NONE][0]['value'])) {
            $replacements[$original] = $node->field_alternative_title[LANGUAGE_NONE][0]['safe_value'];
          }
          break;
      }
    }
  }
  return $replacements;
}
