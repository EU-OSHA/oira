<?php
/**
 * @file
 * Code for the Oira Partner feature.
 */

include_once 'oira_partner.features.inc';
include_once 'oira_partner.inc';

function oira_partner_field_extra_fields_formatter_info() {
  return [
    'partner_content_count' => [
      'label' => t('Partner count'),
      'description' => t('Format partner count.'),
      'extra field types' => ['partner_content_count'],
//      'settings' => ['format' => 'medium'],
    ],
  ];
}

function oira_partner_field_extra_fields_formatter_settings_form($extra_field_name, $view_mode, $display, $form, &$form_state) {
  $settings = $display['settings'];
  $element = [];
  switch ($display['type']) {
    case 'partner_content_count':
      break;
  }
  return $element;
}

function oira_partner_field_extra_fields_formatter_settings_summary($extra_field_name, $view_mode, $display) {
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'partner_content_count':
      return t('Display counts');
  }
}

function oira_partner_field_extra_fields_formatter_view($entity_type, $entity, $extra_field_name, $langcode, $items, $display) {
  $element = [];
//  $settings = $display['settings'];
  switch ($display['type']) {
    case 'partner_content_count':
      $types = node_type_get_types();
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'item',
          '#title' => $types[$delta]->name,
          '#prefix' => '<div class="partner-content-label partner-content-count-' . $delta . '">',
          '#suffix' => '</div>',
          '#markup' => '<span class="partner-content-counter">' . $item . '</span>',
        );
      }
      break;
  }
  return $element;
}



/**
 * Implements hook_field_extra_fields().
 */
function oira_partner_field_extra_fields() {
  $content_count = array(
    'display' => array(
      'partner_content_count' => array(
        'label' => t('Content count'),
        'description' => t('The bar with links to social websites'),
        'extra field type' => 'partner_content_count',
        'weight' => 0,
      ),
    ),
  );
  $extra['node']['partner'] = $content_count;
  return $extra;
}

/**
 * Implements hook_node_view().
 */
function oira_partner_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'partner') {
    $extra_fields = field_info_extra_fields('node', $node->type, 'display');
    $extra_field_pc = $extra_fields['partner_content_count'];
    if (!empty($extra_field_pc['display'][$view_mode]['visible'])) {
      $display = $extra_fields['partner_content_count']['display'];
      $node->content['partner_content_count'] = [
          '#theme' => 'field',
          '#label_display' => $extra_field_pc['label'],
          '#title' => $extra_field_pc['label'],
          '#items' => _oira_partner_compute_content_count($node),
          '#field_type' => 'extra_field',
          '#field_name' => 'partner_content_count',
          '#entity_type' => 'node',
          '#bundle' => 'partner',
          '#weight' => (int) $display[$view_mode]['weight'],
        ];
    }
  }
}

function _oira_partner_compute_content_count($node) {
  $cache = cache_get('oira_partner_count:' . $node->nid);
  if (!empty($cache)) {
    return $cache->data;
  }
  $bundles = array('news', 'practical_tool', 'promotional_material');
  $return = array();
  foreach ($bundles as $bundle) {
    $return[$bundle] = 0;
  }
  if (!empty($node->workbench_access)) {
    $section_id = current($node->workbench_access);
    $wa_subquery = db_select('workbench_access_node', 'wn')
      ->fields('wn', array('nid'))
      ->condition('access_id', $section_id);
    $co_subquery = db_select('field_data_field_co_author', 'co')
      ->fields('co', array('entity_id'))
      ->condition('field_co_author_tid', $section_id);
    $or = db_or();
    $or->condition('n.nid', $wa_subquery, 'IN');
    $or->condition('n.nid', $co_subquery, 'IN');
    $query = db_select('node', 'n')
      ->fields('n', array());
    $query->innerJoin('field_data_field_publication_date', 'pd', 'n.nid = pd.entity_id');
    $query->where('pd.field_publication_date_value <= NOW()');
    $query->condition('n.status', 1);
    $query->condition('n.type', $bundles, 'IN');
    $query->condition($or);
    $result = $query->execute()->fetchAllAssoc('nid');
    // TODO maybe we will need to store also the nids. for now just counts.
    foreach ($result as $res) {
      $return[$res->type]++;
    }
    cache_set('oira_partner_count:' . $node->nid, $return, 'cache', variable_get('page_cache_maximum_age', strtotime('+1 day')));
    return $return;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function oira_partner_views_pre_render(&$view) {
  if ($view->name == 'partners_list' && $view->current_display == 'block') {
    global $language;
    $results = &$view->result;
    // Sort the results by country name (using UTF-8).
    uasort($results, function($a, $b) use ($language) {
      if(class_exists('Collator')) { // requires php-intl extension
        $collator = new \Collator($language->language);
        return $collator->compare($a->field_field_country[0]['rendered']['#title'], $b->field_field_country[0]['rendered']['#title']);
      }
      else { // sorting in some languages (greek) are wrong
        $str1 = htmlspecialchars($a->field_field_country[0]['rendered']['#title']);
        $str2 = htmlspecialchars($b->field_field_country[0]['rendered']['#title']);
        return strcmp($str1, $str2);
      }
    });
  }
}
