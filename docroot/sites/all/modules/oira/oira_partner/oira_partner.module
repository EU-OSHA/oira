<?php
/**
 * @file
 * Code for the Oira Partner feature.
 */

include_once 'oira_partner.features.inc';
include_once 'oira_partner.inc';

function oira_partner_field_extra_fields_formatter_info() {
  return [
    'partner_content_count' => [
      'label' => t('Partner count'),
      'description' => t('Format partner count.'),
      'extra field types' => ['partner_content_count'],
//      'settings' => ['format' => 'medium'],
    ],
  ];
}


function oira_partner_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['country_partner_content'] = array(
    'label' => t('Content in country'),
    'custom settings' => FALSE,
  );
}

function oira_partner_field_extra_fields_formatter_settings_form($extra_field_name, $view_mode, $display, $form, &$form_state) {
  $settings = $display['settings'];
  $element = [];
  switch ($display['type']) {
    case 'partner_content_count':
      break;
  }
  return $element;
}

function oira_partner_field_extra_fields_formatter_settings_summary($extra_field_name, $view_mode, $display) {
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'partner_content_count':
      return t('Display counts');
  }
}

function oira_partner_field_extra_fields_formatter_view($entity_type, $entity, $extra_field_name, $langcode, $items, $display) {
  $element = [];
//  $settings = $display['settings'];
  switch ($display['type']) {
    case 'partner_content_count':
      $types = node_type_get_types();
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'item',
          '#title' => $types[$delta]->name,
          '#prefix' => '<div class="partner-content-label partner-content-count-' . $delta . '">',
          '#suffix' => '</div>',
          '#markup' => '<span class="partner-content-counter">' . $item . '</span>',
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements MODULE_preprocess_HOOK().
 */
function oira_partner_preprocess_node(&$variables) {
  if (!empty($variables['node'])) {
    $node = $variables['node'];
    if ($node->type == 'practical_tool') {
      if (!empty($node->field_sector[LANGUAGE_NONE][0]['tid'])) {
        $term = taxonomy_term_load($node->field_sector[LANGUAGE_NONE][0]['tid']);
        $variables['attributes_array']['data-sector-tid'] = $term->tid;
        $variables['attributes_array']['data-sector-label'] = $term->name;
      }
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function oira_partner_field_extra_fields() {
  $content_count = array(
    'display' => array(
      'partner_content_count' => array(
        'label' => t('Content count'),
        'description' => t('Partner content count'),
        'extra field type' => 'partner_content_count',
        'weight' => 0,
        'callback' => 'oira_partner_views_field_content_count_callback',
      ),
    ),
  );
  $extra['node']['partner'] = $content_count;
  return $extra;
}

/**
 * Implements hook_node_view().
 */
function oira_partner_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'partner') {
    $extra_fields = field_info_extra_fields('node', $node->type, 'display');
    $extra_field_pc = $extra_fields['partner_content_count'];
    if (!empty($extra_field_pc['display'][$view_mode]['visible'])) {
      $display = $extra_fields['partner_content_count']['display'];
      $node->content['partner_content_count'] = [
          '#theme' => 'field',
          '#label_display' => $extra_field_pc['label'],
          '#title' => $extra_field_pc['label'],
          '#items' => _oira_partner_compute_content_count($node),
          '#field_type' => 'extra_field',
          '#field_name' => 'partner_content_count',
          '#entity_type' => 'node',
          '#bundle' => 'partner',
          '#weight' => (int) $display[$view_mode]['weight'],
        ];
    }
  }
}

/**
 * Extra field callback for views.
 */
function oira_partner_views_field_content_count_callback($node) {
  $extra_fields = field_info_extra_fields('node', $node->type, 'display');
  $extra_field_pc = $extra_fields['partner_content_count'];
  $content = [
    '#theme' => 'field',
    '#label_display' => $extra_field_pc['label'],
    '#title' => $extra_field_pc['label'],
    '#items' => _oira_partner_compute_content_count($node),
    '#field_type' => 'extra_field',
    '#field_name' => 'partner_content_count',
    '#entity_type' => 'node',
    '#bundle' => 'partner',
  ];
  $display = array('type' => 'partner_content_count');
  $element = oira_partner_field_extra_fields_formatter_view('taxonomy_term', $node, 'partner_content_count', 'en', $content['#items'], $display);
  return drupal_render($element);
}


/**
 * Implements hook_block_info().
 */
function oira_partner_block_info() {
  $blocks = array();
  $blocks['oira_partner_country'] = array(
    'info' => t('Oira partner in country'),
    'status' => 1,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'weight' => -3,
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * {@inheritdoc}
 */
function oira_partner_block_view($delta) {
  $block = array();
  switch ($delta) {
    case 'oira_partner_country':
      $block['subject'] = '';
      $block['content'] = _oira_partner_partner_country_minipanel();
      break;

    case 'oira_partner_country_content':
      $block['subject'] = '';
      $block['content'] = _oira_partner_partner_country_minipanel();
      break;
  }
  return $block;
}

/**
 * Implements hook_block_view().
 */
function _oira_partner_partner_country_minipanel() {
  $render = array();
  $term = menu_get_object('taxonomy_term', 2);

  if (!empty($term)) {
    $partners = _oira_partner_get_by_country($term->tid, 262);
    if (!empty($partners)) {
      $count = count($partners);
      $render = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('country-partners-container', 'partners-no-' . $count)),
      );
      $partners = node_load_multiple($partners);
      $extra_class = '';
      if ($count > 1) {
        $render['#attributes']['class'][] = 'row';
        $extra_class = 'col-md-6';
      }
      foreach ($partners as $node) {
        $name = 'partner_in_country';
        $panel_mini = panels_mini_load($name);
        ctools_include('context');
        $context = ctools_context_create('entity:node', $node);
        $contexts = ctools_context_match_required_contexts($panel_mini->requiredcontexts, array($context));
        $panel_mini->context = $panel_mini->display->context = ctools_context_load_contexts($panel_mini, FALSE, $contexts);
        $panel_mini->display->css_id = panels_mini_get_id($panel_mini->name);
        // Here is the markup, to with with whatever you wish.
        $render[] = array(
          '#type' => 'markup',
          '#markup' => '<div class="country-partner-wrapper ' . $extra_class . '">' . panels_render_display($panel_mini->display) . '</div>',
        );
      }
    }
  }
  return $render;
}

/**
 * Implements hook_node_presave().
 */
function oira_partner_node_presave($node) {
  // Invalidate content count cache.
  if ($node->type == 'partner') {
    cache_clear_all(_oira_partner_compute_count_cid($node), 'cache');
  }
}

function _oira_partner_compute_count_cid($node) {
  return 'oira_partner_count:' . $node->nid;
}

function _oira_partner_compute_content_count($node) {
  $cache = cache_get(_oira_partner_compute_count_cid($node));
  if (!empty($cache)) {
    return $cache->data;
  }
  $bundles = array('news', 'practical_tool', 'promotional_material');
  $return = array();
  foreach ($bundles as $bundle) {
    $return[$bundle] = 0;
  }
  if (!empty($node->workbench_access)) {
    $section_id = current($node->workbench_access);
    $wa_subquery = db_select('workbench_access_node', 'wn')
      ->fields('wn', array('nid'))
      ->condition('access_id', $section_id);
    $co_subquery = db_select('field_data_field_co_author', 'co')
      ->fields('co', array('entity_id'))
      ->condition('field_co_author_tid', $section_id);
    $or = db_or();
    $or->condition('n.nid', $wa_subquery, 'IN');
    $or->condition('n.nid', $co_subquery, 'IN');
    $query = db_select('node', 'n')
      ->fields('n', array());
    $query->innerJoin('field_data_field_publication_date', 'pd', 'n.nid = pd.entity_id');
    $query->where('pd.field_publication_date_value <= NOW()');
    $query->condition('n.status', 1);
    $query->condition('n.type', $bundles, 'IN');
    $query->condition($or);
    $result = $query->execute()->fetchAllAssoc('nid');
    // TODO maybe we will need to store also the nids. for now just counts.
    foreach ($result as $res) {
      $return[$res->type]++;
    }
    cache_set(_oira_partner_compute_count_cid($node), $return, 'cache', variable_get('page_cache_maximum_age', strtotime('+1 day')));
    return $return;
  }
}

function _oira_partner_get_by_country($tid, $type_tid = NULL) {
  $partners = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'partner')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_country', 'tid', $tid);
  if (!empty($type_tid)) {
    $query->fieldCondition('field_partner_type', 'tid', $type_tid);
  }

  $result = $query->execute();
  if (isset($result['node'])) {
    $partners = array_keys($result['node']);
  }
  return $partners;
}
